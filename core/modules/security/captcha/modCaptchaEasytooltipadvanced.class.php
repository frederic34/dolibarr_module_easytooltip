<?php
/* Copyright (C) 2006-2011  Laurent Destailleur     <eldy@users.sourceforge.net>
 * Copyright (C) 2024		Frédéric France			<frederic.france@free.fr>
 * Copyright (C) 2024		MDW						<mdeweerd@users.noreply.github.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 * or see https://www.gnu.org/
 */

/**
 *      \file       htdocs/core/modules/security/captcha/modCaptchaEasytooltip.class.php
 *      \ingroup    core
 *		\brief      File to manage captcha generation according to dolibarr native code
 */

require_once DOL_DOCUMENT_ROOT . '/core/modules/security/captcha/modules_captcha.php';
require_once DOL_DOCUMENT_ROOT . '/core/modules/security/generate/modGeneratePassStandard.class.php';
dol_include_once('/easytooltip/vendor/autoload.php');

use IconCaptcha\IconCaptcha;
// phpcs:disable
/**
 *	Class to generate a password according to a dolibarr standard rule (12 random chars)
 */
class modCaptchaEasytooltipadvanced extends ModeleCaptcha
{
	// phpcs:enable
	/**
	 * @var string ID
	 */
	public $id;

	/**
	 * @var string
	 */
	public $picto = 'fa-shield-alt';

	/**
	 *	Constructor
	 *
	 *  @param		DoliDB		$db			Database handler
	 *	@param		Conf		$conf		Handler de conf
	 *	@param		Translate	$langs		Handler de langue
	 *	@param		User		$user		Handler du user connected
	 */
	public function __construct($db, $conf, $langs, $user)
	{
		$this->id = strtolower(preg_replace('/^modCaptcha/i', '', get_class($this)));

		$this->db = $db;
		$this->conf = $conf;
		$this->langs = $langs;
		$this->user = $user;
		$this->langs->load('easytooltip@easytooltip');
	}

	/**
	 *		Return description of module
	 *
	 *      @return     string      Description of module
	 */
	public function getDescription()
	{
		global $langs;
		return $langs->trans("DolibarrEasytooltipCaptcha");
	}

	/**
	 * 		Return an example of password generated by this module
	 *
	 *      @return     string      Example of password
	 */
	public function getExample()
	{
		return $this->getCaptchaCodeForForm();
	}

	/**
	 * 	Return the HTML content to output on a form that need the captcha
	 *
	 *  @param		string	$php_self	An URL for the a href link
	 *  @return     string				The HTML code to output
	 */
	public function getCaptchaCodeForForm($php_self = '')
	{
		global $langs;

		// Output the image by calling /core/antispamimage.php
		// This antispamimage also record the value of code into $_SESSION['dol_antispam_value'] so we will be able to validate by calling
		// validateCodeAfterLoginSubmit() later when we submit the login form.

		$out = '
		<!-- The widget will be rendered in this element. -->
		<div class="iconcaptcha-widget" data-theme="light"></div>

		<!-- Additional security feature to prevent CSRF. -->
		<!-- Optional, but highly recommended. Configure in config (\'token\' option). -->';
		$out .= \IconCaptcha\Token\IconCaptchaToken::render();
		$out .= '

		<!-- Include the assets. Change the paths accordingly or use the CDN assets. -->
		<link href="' . dol_buildpath('/easytooltip/iconcaptcha/client/css/iconcaptcha.min.css', 1) . '" rel="stylesheet" type="text/css">
		<script src="' . dol_buildpath('/easytooltip/iconcaptcha/client//js/iconcaptcha.min.js', 1) . '" type="text/javascript"></script>
		<script type="text/javascript">
			document.addEventListener("DOMContentLoaded", function() {
				IconCaptcha.init(".iconcaptcha-widget", {
					general: {
						endpoint: "' . dol_buildpath('/easytooltip/core/modules/captcha/captcha-request.php', 1) . '",
						fontFamily: "inherit",
						showCredits: false,
					},
					security: {
						interactionDelay: 1500,
						hoverProtection: true,
						displayInitialMessage: true,
						initializationDelay: 500,
						incorrectSelectionResetDelay: 3000,
						loadingAnimationDuration: 500,
					},
					locale: {
						initialization: {
							verify: "' . $langs->trans('VerifyThatYouAreHuman') . '",
							loading: "' . $langs->transnoentities('LoadingChallenge') . '",
					},
					header: "' . $langs->trans('SelectTheImageDisplayed') . '",
					correct: "Verification complete.",
					incorrect: {
						title: "Uh oh.",
						subtitle: "You\'ve selected the wrong image.",
					},
					timeout: {
						title: "' . $langs->trans('PleaseWait') . '",
						subtitle: "' . $langs->trans('YouMadeTooManyIncorrectSelections') . '"
					}
				}
			});
		});
		</script>';

		return $out;
	}



	/**
	 * 	Validate a captcha
	 * 	This function is called after a log to validate a captcha, before validating a password.
	 *
	 *  @return     int					0 if KO, >0 if OK
	 */
	public function validateCodeAfterLoginSubmit()
	{
		$options = require dol_buildpath('/easytooltip/captcha-config.php', 0);

		// Create an instance of IconCaptcha.
		$captcha = new IconCaptcha($options);

		// Validate the captcha.
		$validation = $captcha->validate($_POST);

		$ok = $validation->success();

		return $ok;
	}
}
